//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChangePasswordEIServiceReference
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.mygemini.com/schemas/mygemini", ConfigurationName="ChangePasswordEIServiceReference.ChangePasswordService")]
    public interface ChangePasswordService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.mygemini.com/schemas/mygemini/ChangePassword", ReplyAction="*")]
        System.Threading.Tasks.Task<ChangePasswordEIServiceReference.ChangePasswordResponse> ChangePasswordAsync(ChangePasswordEIServiceReference.ChangePasswordRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ChangePasswordRequestIo", WrapperNamespace="http://www.mygemini.com/schemas/mygemini", IsWrapped=true)]
    public partial class ChangePasswordRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.mygemini.com/schemas/mygemini", Order=0)]
        public string newPassword;
        
        public ChangePasswordRequest()
        {
        }
        
        public ChangePasswordRequest(string newPassword)
        {
            this.newPassword = newPassword;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ChangePasswordResponseIo", WrapperNamespace="http://www.mygemini.com/schemas/mygemini", IsWrapped=true)]
    public partial class ChangePasswordResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.mygemini.com/schemas/mygemini", Order=0)]
        public string message;
        
        public ChangePasswordResponse()
        {
        }
        
        public ChangePasswordResponse(string message)
        {
            this.message = message;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public interface ChangePasswordServiceChannel : ChangePasswordEIServiceReference.ChangePasswordService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public partial class ChangePasswordServiceClient : System.ServiceModel.ClientBase<ChangePasswordEIServiceReference.ChangePasswordService>, ChangePasswordEIServiceReference.ChangePasswordService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ChangePasswordServiceClient() : 
                base(ChangePasswordServiceClient.GetDefaultBinding(), ChangePasswordServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.ChangePasswordServicePort.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ChangePasswordServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(ChangePasswordServiceClient.GetBindingForEndpoint(endpointConfiguration), ChangePasswordServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ChangePasswordServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ChangePasswordServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ChangePasswordServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ChangePasswordServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ChangePasswordServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ChangePasswordEIServiceReference.ChangePasswordResponse> ChangePasswordEIServiceReference.ChangePasswordService.ChangePasswordAsync(ChangePasswordEIServiceReference.ChangePasswordRequest request)
        {
            return base.Channel.ChangePasswordAsync(request);
        }
        
        public System.Threading.Tasks.Task<ChangePasswordEIServiceReference.ChangePasswordResponse> ChangePasswordAsync(string newPassword)
        {
            ChangePasswordEIServiceReference.ChangePasswordRequest inValue = new ChangePasswordEIServiceReference.ChangePasswordRequest();
            inValue.newPassword = newPassword;
            return ((ChangePasswordEIServiceReference.ChangePasswordService)(this)).ChangePasswordAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ChangePasswordServicePort))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ChangePasswordServicePort))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8080/dbi/dbiService");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ChangePasswordServiceClient.GetBindingForEndpoint(EndpointConfiguration.ChangePasswordServicePort);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ChangePasswordServiceClient.GetEndpointAddress(EndpointConfiguration.ChangePasswordServicePort);
        }
        
        public enum EndpointConfiguration
        {
            
            ChangePasswordServicePort,
        }
    }
}
